set -e

dockerCmd="docker compose"
if (( $# == 2 )); then
    dockerCmd="docker-compose"
fi

if (( $# < 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [create|start|stop]"
    exit 1
fi

stoppingContainers () {
	CONTAINERS=$(docker ps --filter "label=orchestracities=diorama" -aq)
	if [[ -n $CONTAINERS ]]; then 
		echo "Stopping containers"
		docker rm -f $CONTAINERS || true
	fi
	VOLUMES=$(docker volume ls -qf dangling=true) 
	if [[ -n $VOLUMES ]]; then 
		echo "Removing old volumes"
		docker volume rm $VOLUMES || true
	fi
	NETWORKS=$(docker network ls  --filter "label=orchestracities=diorama" -q) 
	if [[ -n $NETWORKS ]]; then 
		echo "Removing tutorial networks"
		docker network rm $NETWORKS || true
	fi
}

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*
	(gp ports list 2> /dev/null) || true 
	echo ""
}

addDatabaseIndex () {
	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrion\033[0m  ..."
	docker exec  db-mongo mongo --eval '
	conn = new Mongo();db.createCollection("orion");
	db = conn.getDB("orion");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	docker exec  db-mongo mongo --eval '
	conn = new Mongo();db.createCollection("orion-openiot");
	db = conn.getDB("orion-openiot");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"

	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;36mIoT-Agent\033[0m  ..."
	docker exec  db-mongo mongo --eval '
	conn = new Mongo();
	db = conn.getDB("iotagentjson");
	db.createCollection("devices");
	db.devices.createIndex({"_id.service": 1, "_id.id": 1, "_id.type": 1});
	db.devices.createIndex({"_id.type": 1}); 
	db.devices.createIndex({"_id.id": 1});
	db.createCollection("groups");
	db.groups.createIndex({"_id.resource": 1, "_id.apikey": 1, "_id.service": 1});
	db.groups.createIndex({"_id.type": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"
}

waitForMongo () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo` == "healthy" ]
	do 
		sleep 1
	done
}

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrion\033[0m to be available\n"

	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-orion` == "healthy" ]
	do
	  echo -e "Context Broker HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:1026/version'` " (waiting for 200)"
	  sleep 1
	done
}


waitForIoTAgent () {
	echo -e "\n⏳ Waiting for \033[1;36mIoT-Agent\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-iot-agent` == "healthy" ]

	do 
	  echo -e "IoT Agent HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:4041/version'` " (waiting for 200)"
	  sleep 1
	done
}

loraAgentSubscription() {
	echo -e "\nSubscribing to mqtt\n"

	curl --location --request POST 'localhost:4042/iot/services' \
	--header 'fiware-service: openiot' \
	--header 'fiware-servicePath: /' \
	--header 'Content-Type: application/json' \
	--data-raw '{
	    "services": [
	        {
				"device_id": "urn:ngsi-ld:WasteContainer:martel-ttn-001",
     			"entity_name": "urn:ngsi-ld:WasteContainer:martel-ttn-001",
	            "entity_type": "WasteContainer",
	            "apikey": "",
	            "resource": "8CF957200005727C",
				"expressionLanguage": "jexl",
	            "attributes": [
	                {
	                    "object_id": "temperature_1",
	                    "name": "temperature",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "relative_humidity_1",
	                    "name": "relativeHumidity",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "digital_in_1",
	                    "name": "fillingLevel",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "digital_in_2",
	                    "name": "status",
	                    "type": "Text",
						"expression" : "digital_in_2 == 0 ? \"Ok\" : digital_in_2 == 1 ? \"Lid Open\" : digital_in_2 == 2 ? \"Dropped\" : \"Burning\" "
	                }
	            ],
	            "internal_attributes": {
	                "lorawan": {
	                    "application_server": {
	                        "host": "eu1.cloud.thethings.network",
	                        "username": "oc-diorama-001@ttn",
	                        "password": "NNSXS.KQRRO4R7BXMHELHQZOMELYUJ2GQUU4S5EI2I6QY.P7FJVWQRODOLCOHOAC2GQMEDO65LINW6YAOBKL6YMUU2K5C4R5MA",
	                        "provider": "TTN"
	                    },
	                    "app_eui": "8CF957200005727C",
	                    "application_id": "oc-diorama-001@ttn",
	                    "application_key": "51F58CAC3F5735E3D1F88DD3EADBE9C6",
	                    "data_model": "application_server"
	                }
	            }
	        }
	    ]
	}'

	curl --location --request POST 'localhost:4042/iot/services' \
	--header 'fiware-service: openiot' \
	--header 'fiware-servicePath: /' \
	--header 'Content-Type: application/json' \
	--data-raw '{
	    "services": [
            {
				"device_id": "urn:ngsi-ld:AirQualityObserved:martel-ttn-002",
      			"entity_name": "urn:ngsi-ld:AirQualityObserved:martel-ttn-002",
				"device_id": "urn:ngsi-ld:environment:martel-ttn-002",
      			"entity_name": "urn:ngsi-ld:environment:martel-ttn-002",
	            "entity_type": "environment",
	            "apikey": "",
	            "resource": "8CF95720000569A6",
				"expressionLanguage": "jexl",
	            "attributes": [
	                {
	                    "object_id": "digital_in_1",
	                    "name": "NO2",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "digital_in_2",
	                    "name": "C2H50H",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "digital_in_3",
	                    "name": "VOC",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "digital_in_4",
	                    "name": "CO",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "digital_in_5",
	                    "name": "airQuality",
	                    "type": "Text",
						"expression" : "digital_in_5 == 0 ? \"Good\" : digital_in_5 == 1 ? \"Low\" : digital_in_5 == 2 ? \"Med\" : \"High\" "
	                },
	                {
	                    "object_id": "digital_in_6",
	                    "name": "sound",
	                    "type": "Number"
	                },
	                {
	                    "object_id": "digital_in_7",
	                    "name": "UVvalue",
	                    "type": "Number"
	                }
	            ],
	            "internal_attributes": {
	                "lorawan": {
	                    "application_server": {
	                        "host": "eu1.cloud.thethings.network",
	                        "username": "oc-diorama-002@ttn",
	                        "password": "NNSXS.WYCQ2VM2FNMXR5DNYYCYAHAQAACG4XA3FTBMRYA.SNSYCYYNLGVM4POZWSQ4VINZOUUPT5OAV3DU436W6AZXPRTLQCZA",
	                        "provider": "TTN"
	                    },
	                    "app_eui": "8CF95720000569A6",
	                    "application_id": "oc-diorama-002@ttn",
	                    "application_key": "F80714239C6BC515D1772ED0C38A55F0", 
	                    "data_model": "application_server"
	                }
	            }
	        }
	    ]
	}'
}

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|start|stop]"
        ;;
	"start")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		echo -e "Starting containers: \033[1;34mOrion\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;28mQuantumleap\033[0m and a \033[1;32mIoT-Agent Lorawan\033[0m database."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- \033[1;36mIoT-Agent\033[0m is configured for the JSON Protocol"
		echo -e "- \033[1;32mIoT-Agent Lorawan\033[0m is configured"
		echo -e "- \033[1;28mQuantumleap\033[0m is configured"
		echo ""
		${dockerCmd} up -d --remove-orphans
		waitForMongo
		addDatabaseIndex
		waitForIoTAgent
		waitForOrion
		displayServices
		loraAgentSubscription
		;;
	"stop")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		;;
	"create")
		export $(cat .env | grep "#" -v)
		echo "Pulling Docker images"
		docker pull curlimages/curl
		${dockerCmd} pull 
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|start|stop]"
		exit 127;
		;;
esac
